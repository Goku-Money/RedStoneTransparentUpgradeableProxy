/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1967",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "ITransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "CalldataExtractor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CalldataExtractor__factory>;
    getContractFactory(
      name: "RedstoneConstants",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedstoneConstants__factory>;
    getContractFactory(
      name: "RedstoneConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedstoneConsumerBase__factory>;
    getContractFactory(
      name: "RedstoneConsumerNumericBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedstoneConsumerNumericBase__factory>;
    getContractFactory(
      name: "RedstoneDefaultsLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedstoneDefaultsLib__factory>;
    getContractFactory(
      name: "PrimaryProdDataServiceConsumerBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PrimaryProdDataServiceConsumerBase__factory>;
    getContractFactory(
      name: "NumericArrayLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NumericArrayLib__factory>;
    getContractFactory(
      name: "ExampleRedStoneTransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExampleRedStoneTransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "IPriceAggregatorAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPriceAggregatorAdapter__factory>;
    getContractFactory(
      name: "MintableERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintableERC20__factory>;
    getContractFactory(
      name: "PriceAggregatorAdapterRedStoneImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PriceAggregatorAdapterRedStoneImpl__factory>;
    getContractFactory(
      name: "RedStonePriceExtractor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedStonePriceExtractor__factory>;
    getContractFactory(
      name: "RedStoneTransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedStoneTransparentUpgradeableProxy__factory>;

    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1967",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "ITransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITransparentUpgradeableProxy>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "CalldataExtractor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CalldataExtractor>;
    getContractAt(
      name: "RedstoneConstants",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedstoneConstants>;
    getContractAt(
      name: "RedstoneConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedstoneConsumerBase>;
    getContractAt(
      name: "RedstoneConsumerNumericBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedstoneConsumerNumericBase>;
    getContractAt(
      name: "RedstoneDefaultsLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedstoneDefaultsLib>;
    getContractAt(
      name: "PrimaryProdDataServiceConsumerBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PrimaryProdDataServiceConsumerBase>;
    getContractAt(
      name: "NumericArrayLib",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NumericArrayLib>;
    getContractAt(
      name: "ExampleRedStoneTransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ExampleRedStoneTransparentUpgradeableProxy>;
    getContractAt(
      name: "IPriceAggregatorAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPriceAggregatorAdapter>;
    getContractAt(
      name: "MintableERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintableERC20>;
    getContractAt(
      name: "PriceAggregatorAdapterRedStoneImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PriceAggregatorAdapterRedStoneImpl>;
    getContractAt(
      name: "RedStonePriceExtractor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedStonePriceExtractor>;
    getContractAt(
      name: "RedStoneTransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedStoneTransparentUpgradeableProxy>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
